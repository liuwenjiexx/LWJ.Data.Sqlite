using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace LWJ.Data.Sqlite.Test
{
    [TestClass]
    public class OpenTest
    {
        [TestMethod]
        public void Open_FileDB()
        {
            using (var db = new FileDB())
            {
                Assert.IsFalse(db.IsOpened);
                db.Open();
                Assert.IsTrue(db.IsOpened);
                db.NonQuery("select * from table1");
            }
        }

        [TestMethod]
        public void OpenFile_InMemory()
        {
            using (var db = new FileDB())
            {
                db.Open();
                int count = db.Scalar<int>("select count(*) from table1");

                using (var db2 = new FileDB())
                {
                    db2.OpenInMemory();
                    db2.NonQuery("insert into table1 (stringField) values(@stringField)", "A");

                    Assert.IsTrue(db2.Scalar<int>("select count(*) from table1") > count);
                }

                Assert.AreEqual(count, db.Scalar<int>("select count(*) from table1"));

            }
        }


        [TestMethod]
        public void Open_MemoryDB()
        {
            using (SqliteDatabase db = new MemoryDB())
            {
                db.Open();
                Assert.IsTrue(db.IsOpened);
                db.NonQuery("select * from table1");
            }
        }
        [TestMethod]
        public void Open_FileToMemoryDB()
        {
            using (FileToMemoryDB db = new FileToMemoryDB())
            {
                db.Open();
                Assert.IsTrue(db.IsOpened);
                db.NonQuery("select * from table1");
            }
        }


        [ExpectedException(typeof(Exception), AllowDerivedTypes =true)]
        [TestMethod]
        public void DB_NotExists()
        {
            SqliteDatabase db = new SqliteDatabase("", 0);
        }


    }
}
